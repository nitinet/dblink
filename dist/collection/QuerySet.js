import { plainToInstance } from 'class-transformer';
import * as sql from 'dblink-core/src/sql/index.js';
import * as lodash from 'lodash-es';
import { Transform } from 'node:stream';
import { FOREIGN_KEY_FUNC, FOREIGN_KEY_TYPE, TABLE_COLUMN_KEYS } from '../decorators/Constants.js';
import * as exprBuilder from '../exprBuilder/index.js';
import IQuerySet from './IQuerySet.js';
class QuerySet extends IQuerySet {
    EntityType;
    dbSet;
    alias;
    stat = new sql.Statement(sql.types.Command.SELECT);
    columnKeys = [];
    foreignKeys = [];
    constructor(context, EntityType, dbSet) {
        super();
        this.context = context;
        this.EntityType = EntityType;
        this.dbSet = dbSet;
        this.alias = this.dbSet.tableName.charAt(0);
        this.stat.collection.value = this.dbSet.tableName;
        this.stat.collection.alias = this.alias;
    }
    prepareSelectStatement() {
        if (this.columnKeys.length == 0) {
            this.columnKeys = Reflect.getMetadata(TABLE_COLUMN_KEYS, this.EntityType.prototype);
        }
        const targetKeys = this.columnKeys.map(key => key.toString());
        const fields = this.dbSet.getFieldMappingsByKeys(targetKeys);
        this.stat.columns = this.getColumnExprs(fields, this.alias);
    }
    async list() {
        this.prepareSelectStatement();
        const result = await this.context.runStatement(this.stat);
        return Promise.all(result.rows.map(this.transformer.bind(this)));
    }
    async count() {
        const countStmt = lodash.cloneDeep(this.stat);
        countStmt.columns = [new sql.Expression('count(1) as count')];
        countStmt.groupBy.length = 0;
        countStmt.orderBy.length = 0;
        countStmt.limit = new sql.Expression();
        const countResult = await this.context.runStatement(countStmt);
        return countResult.rows[0]['count'];
    }
    async listAndCount() {
        const values = await this.list();
        const count = await this.count();
        return { count, values };
    }
    async transformer(row) {
        this.columnKeys.forEach(key => {
            const fieldMapping = this.dbSet.fieldMap.get(key.toString());
            if (fieldMapping && key != fieldMapping.colName) {
                row[key.toString()] = row[fieldMapping.colName];
            }
        });
        const obj = plainToInstance(this.EntityType, row, { enableImplicitConversion: true, excludeExtraneousValues: true });
        await Promise.all(this.foreignKeys.map(async (key) => {
            const foreignType = Reflect.getMetadata(FOREIGN_KEY_TYPE, obj, key);
            const foreignFunc = Reflect.getMetadata(FOREIGN_KEY_FUNC, obj, key);
            const propertyType = Reflect.getMetadata('design:type', obj, key);
            if (!foreignType || !foreignFunc || !propertyType)
                return;
            const foreignTableSet = this.context.tableSetMap.get(foreignType);
            if (!foreignTableSet)
                throw new TypeError('Invalid Type');
            const foreignQuerySet = foreignTableSet.where(eb => {
                return foreignFunc(eb, obj);
            });
            if (propertyType === Array) {
                const data = await foreignQuerySet.list();
                Reflect.set(obj, key, data);
            }
            else {
                const data = await foreignQuerySet.single();
                Reflect.set(obj, key, data);
            }
        }));
        return obj;
    }
    async stream() {
        this.prepareSelectStatement();
        const dataStream = await this.context.streamStatement(this.stat);
        const transformerFunc = this.transformer.bind(this);
        return dataStream.pipe(new Transform({
            transform: async (chunk, encoding, callback) => {
                const data = await transformerFunc(chunk);
                callback(null, data);
            }
        }));
    }
    select(columnKeys) {
        this.columnKeys.push(...columnKeys);
        return this;
    }
    include(foreignKeys) {
        this.foreignKeys.push(...foreignKeys);
        return this;
    }
    where(param, ...args) {
        const fieldMap = new Map(Array.from(this.dbSet.fieldMap.entries()));
        const eb = new exprBuilder.WhereExprBuilder(fieldMap);
        const res = param(eb, args);
        if (res && res instanceof sql.Expression && res.exps.length > 0) {
            this.stat.where = this.stat.where.add(res);
        }
        return this;
    }
    groupBy(param) {
        const fieldMap = new Map(Array.from(this.dbSet.fieldMap.entries()));
        const eb = new exprBuilder.GroupExprBuilder(fieldMap);
        const res = param(eb);
        if (res && Array.isArray(res)) {
            res.forEach(expr => {
                if (expr instanceof sql.Expression && expr.exps.length > 0) {
                    this.stat.groupBy.push(expr);
                }
            });
        }
        return this;
    }
    orderBy(param) {
        const fieldMap = new Map(Array.from(this.dbSet.fieldMap.entries()));
        const eb = new exprBuilder.OrderExprBuilder(fieldMap);
        const res = param(eb);
        if (res && Array.isArray(res)) {
            res.forEach(a => {
                if (a instanceof sql.Expression && a.exps.length > 0) {
                    this.stat.orderBy.push(a);
                }
            });
        }
        return this;
    }
    limit(size, index) {
        this.stat.limit = new sql.Expression(null, sql.types.Operator.Limit);
        this.stat.limit.exps.push(new sql.Expression(size.toString()));
        if (index) {
            this.stat.limit.exps.push(new sql.Expression(index.toString()));
        }
        return this;
    }
    async update(entity, ...updatedKeys) {
        this.stat.command = sql.types.Command.UPDATE;
        const keys = Reflect.getMetadata(TABLE_COLUMN_KEYS, entity.constructor.prototype);
        const fields = this.dbSet.getFieldMappingsByKeys(keys).filter(field => updatedKeys.includes(field.fieldName));
        if (fields.length == 0)
            throw new Error('Update Fields Empty');
        fields.forEach(field => {
            const c1 = new sql.Expression(field.colName);
            const c2 = new sql.Expression('?');
            const val = Reflect.get(entity, field.fieldName);
            c2.args.push(val);
            const expr = new sql.Expression(null, sql.types.Operator.Equal, c1, c2);
            this.stat.columns.push(expr);
        });
        const result = await this.context.runStatement(this.stat);
        if (result.error)
            throw result.error;
    }
    async delete() {
        this.stat.command = sql.types.Command.DELETE;
        const result = await this.context.runStatement(this.stat);
        if (result.error)
            throw result.error;
    }
}
export default QuerySet;
//# sourceMappingURL=data:application/json;base64,