import Expression from 'dblink-core/src/sql/Expression.js';
import Operator from 'dblink-core/src/sql/types/Operator.js';
import BaseExprBuilder from './BaseExprBuilder.js';
class WhereExprBuilder extends BaseExprBuilder {
    _argExp(operand) {
        if (operand instanceof Expression) {
            return operand;
        }
        else {
            const res = new Expression('?');
            res.args = res.args.concat(operand);
            return res;
        }
    }
    eq(propName, operand) {
        return new Expression(null, Operator.Equal, this._expr(propName), this._argExp(operand));
    }
    neq(propName, operand) {
        return new Expression(null, Operator.NotEqual, this._expr(propName), this._argExp(operand));
    }
    lt(propName, operand) {
        return new Expression(null, Operator.LessThan, this._expr(propName), this._argExp(operand));
    }
    gt(propName, operand) {
        return new Expression(null, Operator.GreaterThan, this._expr(propName), this._argExp(operand));
    }
    lteq(propName, operand) {
        return new Expression(null, Operator.LessThanEqual, this._expr(propName), this._argExp(operand));
    }
    gteq(propName, operand) {
        return new Expression(null, Operator.GreaterThanEqual, this._expr(propName), this._argExp(operand));
    }
    and(propName, operand) {
        return new Expression(null, Operator.And, this._expr(propName), this._argExp(operand));
    }
    or(propName, operand) {
        return new Expression(null, Operator.Or, this._expr(propName), this._argExp(operand));
    }
    not(propName) {
        return new Expression(null, Operator.Not, this._expr(propName));
    }
    in(propName, ...operand) {
        const vals = operand.map(val => {
            const arg = new Expression('?');
            arg.args = arg.args.concat(val);
            return arg;
        });
        return new Expression(null, Operator.In, this._expr(propName), ...vals);
    }
    between(propName, first, second) {
        return new Expression(null, Operator.Between, this._expr(propName), this._argExp(first), this._argExp(second));
    }
    like(propName, operand) {
        return new Expression(null, Operator.Like, this._expr(propName), this._argExp(operand));
    }
    IsNull(propName) {
        return new Expression(null, Operator.IsNull, this._expr(propName));
    }
    IsNotNull(propName) {
        return new Expression(null, Operator.IsNotNull, this._expr(propName));
    }
    plus(propName, operand) {
        return new Expression(null, Operator.Plus, this._expr(propName), this._argExp(operand));
    }
    minus(propName, operand) {
        return new Expression(null, Operator.Minus, this._expr(propName), this._argExp(operand));
    }
    multiply(propName, operand) {
        return new Expression(null, Operator.Multiply, this._expr(propName), this._argExp(operand));
    }
    devide(propName, operand) {
        return new Expression(null, Operator.Devide, this._expr(propName), this._argExp(operand));
    }
    sum(propName) {
        return new Expression(null, Operator.Sum, this._expr(propName));
    }
    min(propName) {
        return new Expression(null, Operator.Min, this._expr(propName));
    }
    max(propName) {
        return new Expression(null, Operator.Max, this._expr(propName));
    }
    count(propName) {
        return new Expression(null, Operator.Count, this._expr(propName));
    }
    average(propName) {
        return new Expression(null, Operator.Avg, this._expr(propName));
    }
}
export default WhereExprBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2hlcmVFeHByQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHByQnVpbGRlci9XaGVyZUV4cHJCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sVUFBVSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNELE9BQU8sUUFBUSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdELE9BQU8sZUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBV25ELE1BQU0sZ0JBQW9CLFNBQVEsZUFBa0I7SUFTMUMsT0FBTyxDQUFDLE9BQWdDO1FBQzlDLElBQUksT0FBTyxZQUFZLFVBQVUsRUFBRSxDQUFDO1lBQ2xDLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7SUFDSCxDQUFDO0lBV0QsRUFBRSxDQUFxQixRQUFXLEVBQUUsT0FBMEI7UUFDNUQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBVUQsR0FBRyxDQUFxQixRQUFXLEVBQUUsT0FBMEI7UUFDN0QsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBVUQsRUFBRSxDQUFxQixRQUFXLEVBQUUs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