import Expression from 'dblink-core/src/sql/Expression.js';
import Operator from 'dblink-core/src/sql/types/Operator.js';
import BaseExprBuilder from './BaseExprBuilder.js';
class WhereExprBuilder extends BaseExprBuilder {
  _argExp(operand) {
    if (operand instanceof Expression) {
      return operand;
    } else {
      const res = new Expression('?');
      res.args = res.args.concat(operand);
      return res;
    }
  }
  eq(propName, operand) {
    return new Expression(null, Operator.Equal, this._expr(propName), this._argExp(operand));
  }
  neq(propName, operand) {
    return new Expression(null, Operator.NotEqual, this._expr(propName), this._argExp(operand));
  }
  lt(propName, operand) {
    return new Expression(null, Operator.LessThan, this._expr(propName), this._argExp(operand));
  }
  gt(propName, operand) {
    return new Expression(null, Operator.GreaterThan, this._expr(propName), this._argExp(operand));
  }
  lteq(propName, operand) {
    return new Expression(null, Operator.LessThanEqual, this._expr(propName), this._argExp(operand));
  }
  gteq(propName, operand) {
    return new Expression(null, Operator.GreaterThanEqual, this._expr(propName), this._argExp(operand));
  }
  in(propName, ...operand) {
    const vals = operand.map(val => {
      const arg = new Expression('?');
      arg.args = arg.args.concat(val);
      return arg;
    });
    return new Expression(null, Operator.In, this._expr(propName), ...vals);
  }
  between(propName, first, second) {
    return new Expression(null, Operator.Between, this._expr(propName), this._argExp(first), this._argExp(second));
  }
  like(propName, operand) {
    return new Expression(null, Operator.Like, this._expr(propName), this._argExp(operand));
  }
  isNull(propName) {
    return new Expression(null, Operator.IsNull, this._expr(propName));
  }
  isNotNull(propName) {
    return new Expression(null, Operator.IsNotNull, this._expr(propName));
  }
  plus(propName, operand) {
    return new Expression(null, Operator.Plus, this._expr(propName), this._argExp(operand));
  }
  minus(propName, operand) {
    return new Expression(null, Operator.Minus, this._expr(propName), this._argExp(operand));
  }
  multiply(propName, operand) {
    return new Expression(null, Operator.Multiply, this._expr(propName), this._argExp(operand));
  }
  devide(propName, operand) {
    return new Expression(null, Operator.Devide, this._expr(propName), this._argExp(operand));
  }
  sum(propName) {
    return new Expression(null, Operator.Sum, this._expr(propName));
  }
  min(propName) {
    return new Expression(null, Operator.Min, this._expr(propName));
  }
  max(propName) {
    return new Expression(null, Operator.Max, this._expr(propName));
  }
  count(propName) {
    return new Expression(null, Operator.Count, this._expr(propName));
  }
  average(propName) {
    return new Expression(null, Operator.Avg, this._expr(propName));
  }
}
export default WhereExprBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2hlcmVFeHByQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIldoZXJlRXhwckJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVLE1BQU0sbUNBQW1DLENBQUM7QUFDM0QsT0FBTyxRQUFRLE1BQU0sdUNBQXVDLENBQUM7QUFDN0QsT0FBTyxlQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFXbkQsTUFBTSxnQkFBb0IsU0FBUSxlQUFrQjtJQVMxQyxPQUFPLENBQUMsT0FBZ0M7UUFDOUMsSUFBSSxPQUFPLFlBQVksVUFBVSxFQUFFLENBQUM7WUFDbEMsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztJQUNILENBQUM7SUFXRCxFQUFFLENBQXFCLFFBQVcsRUFBRSxPQUEwQjtRQUM1RCxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFVRCxHQUFHLENBQXFCLFFBQVcsRUFBRSxPQUEwQjtRQUM3RCxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFVRCxFQUFFLENBQXFCLFFBQVcsRUFBRSxPQUEwQjtRQUM1RCxPQUFPLElBQUks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
