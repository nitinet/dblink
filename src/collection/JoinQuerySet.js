import * as sql from 'dblink-core/src/sql/index.js';
import Operator from 'dblink-core/src/sql/types/Operator.js';
import { cloneDeep } from 'lodash-es';
import { Transform } from 'node:stream';
import * as exprBuilder from '../exprBuilder/index.js';
import IQuerySet from './IQuerySet.js';
class JoinQuerySet extends IQuerySet {
  joinType;
  leftQuerySet;
  rightQuerySet;
  onExpr;
  constructor(context, joinType, leftQuerySet, rightQuerySet, onExpr) {
    super();
    this.context = context;
    this.joinType = joinType;
    this.leftQuerySet = leftQuerySet;
    this.rightQuerySet = rightQuerySet;
    this.onExpr = onExpr;
    this.stat.collection.leftColl = leftQuerySet.stat.collection;
    this.stat.collection.rightColl = rightQuerySet.stat.collection;
    this.stat.collection.onExpr = onExpr;
  }
  initColumnFieldMap() {
    if (this.columnFieldMap.size == 0) return;
    this.leftQuerySet.initColumnFieldMap();
    this.leftQuerySet.columnFieldMap.forEach((field, colName) => {
      this.columnFieldMap.set(colName, field);
    });
    this.rightQuerySet.initColumnFieldMap();
    this.rightQuerySet.columnFieldMap.forEach((field, colName) => {
      this.columnFieldMap.set(colName, field);
    });
  }
  prepareSelectStatement() {
    this.initColumnFieldMap();
    this.stat.command = sql.types.Command.SELECT;
    this.columnFieldMap.forEach((_, colName) => {
      this.stat.columns.push(new sql.Expression(colName));
    });
    this.stat.where = new sql.Expression(null, Operator.And, this.stat.where, this.leftQuerySet.stat.where, this.rightQuerySet.stat.where);
    this.stat.groupBy = [...this.stat.groupBy, ...this.leftQuerySet.stat.groupBy, ...this.rightQuerySet.stat.groupBy];
    this.stat.orderBy = [...this.stat.orderBy, ...this.leftQuerySet.stat.orderBy, ...this.rightQuerySet.stat.orderBy];
  }
  async list() {
    this.prepareSelectStatement();
    const result = await this.context.runStatement(this.stat);
    return Promise.all(result.rows.map(this.transformer.bind(this)));
  }
  async count() {
    const countStmt = cloneDeep(this.stat);
    countStmt.columns = [new sql.Expression('count(1) as count')];
    countStmt.groupBy.length = 0;
    countStmt.orderBy.length = 0;
    countStmt.limit = new sql.Expression();
    const countResult = await this.context.runStatement(countStmt);
    return countResult.rows[0]['count'];
  }
  async listAndCount() {
    const values = await this.list();
    const count = await this.count();
    return { count, values };
  }
  async transformer(row) {
    const obj = {};
    this.columnFieldMap.forEach((field, colName) => {
      obj[field] = row[colName];
    });
    return obj;
  }
  async stream() {
    this.prepareSelectStatement();
    const dataStream = await this.context.streamStatement(this.stat);
    const transformerFunc = this.transformer.bind(this);
    return dataStream.pipe(
      new Transform({
        transform: async (chunk, encoding, callback) => {
          const data = await transformerFunc(chunk);
          callback(null, data);
        }
      })
    );
  }
  select(fields) {
    this.leftQuerySet.initColumnFieldMap();
    this.leftQuerySet.columnFieldMap.forEach((field, colName) => {
      if (fields.includes(field)) this.columnFieldMap.set(colName, field);
    });
    this.rightQuerySet.initColumnFieldMap();
    this.rightQuerySet.columnFieldMap.forEach((field, colName) => {
      if (fields.includes(field)) this.columnFieldMap.set(colName, field);
    });
    return this;
  }
  where(param, ...args) {
    const fieldColumnMap = new Map(Array.from(this.columnFieldMap.entries()).map(([key, value]) => [value, key]));
    const eb = new exprBuilder.WhereExprBuilder(fieldColumnMap);
    const res = param(eb, args);
    if (res && res instanceof sql.Expression && res.exps.length > 0) {
      this.stat.where = this.stat.where.add(res);
    }
    return this;
  }
  groupBy(param) {
    const fieldColumnMap = new Map(Array.from(this.columnFieldMap.entries()).map(([key, value]) => [value, key]));
    const eb = new exprBuilder.GroupExprBuilder(fieldColumnMap);
    const res = param(eb);
    if (res && Array.isArray(res)) {
      res.forEach(expr => {
        if (expr instanceof sql.Expression && expr.exps.length > 0) {
          this.stat.groupBy.push(expr);
        }
      });
    }
    return this;
  }
  orderBy(param) {
    const fieldColumnMap = new Map(Array.from(this.columnFieldMap.entries()).map(([key, value]) => [value, key]));
    const eb = new exprBuilder.OrderExprBuilder(fieldColumnMap);
    const res = param(eb);
    if (res && Array.isArray(res)) {
      res.forEach(a => {
        if (a instanceof sql.Expression && a.exps.length > 0) {
          this.stat.orderBy.push(a);
        }
      });
    }
    return this;
  }
  limit(size, index) {
    this.stat.limit = new sql.Expression(null, sql.types.Operator.Limit);
    this.stat.limit.exps.push(new sql.Expression(size.toString()));
    if (index) {
      this.stat.limit.exps.push(new sql.Expression(index.toString()));
    }
    return this;
  }
  join(joinSet, param, joinType) {
    joinType = joinType ?? sql.types.Join.InnerJoin;
    let temp = null;
    if (param && param instanceof Function) {
      const mainFieldColumnMap = new Map(Array.from(this.columnFieldMap.entries()).map(([key, value]) => [value, key]));
      const mainObj = new exprBuilder.WhereExprBuilder(mainFieldColumnMap);
      const joinFieldColumnMap = new Map(Array.from(joinSet.columnFieldMap.entries()).map(([key, value]) => [value, key]));
      const joinObj = new exprBuilder.BaseExprBuilder(joinFieldColumnMap);
      temp = param(mainObj, joinObj);
    }
    if (!(temp && temp instanceof sql.Expression && temp.exps.length > 0)) throw new Error('Invalid Join');
    const joinQuerySet = new JoinQuerySet(this.context, joinType, this, joinSet, temp);
    return joinQuerySet;
  }
}
export default JoinQuerySet;
//# sourceMappingURL=data:application/json;base64,
