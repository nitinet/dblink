import { plainToInstance } from 'class-transformer';
import * as sql from 'dblink-core/src/sql/index.js';
import { cloneDeep } from 'lodash-es';
import { Transform } from 'node:stream';
import { FOREIGN_KEY_FUNC, FOREIGN_KEY_TYPE, TABLE_COLUMN_KEYS } from '../decorators/Constants.js';
import * as exprBuilder from '../exprBuilder/index.js';
import IQuerySet from './IQuerySet.js';
import JoinQuerySet from './JoinQuerySet.js';
class QuerySet extends IQuerySet {
  EntityType;
  dbSet;
  foreignKeys = [];
  constructor(context, EntityType, dbSet) {
    super();
    this.context = context;
    this.EntityType = EntityType;
    this.dbSet = dbSet;
    this.stat.collection.value = this.dbSet.tableName;
    this.stat.collection.alias = this.dbSet.tableName.charAt(0);
  }
  initColumnFieldMap() {
    if (this.columnFieldMap.size !== 0) return;
    const fields = Reflect.getMetadata(TABLE_COLUMN_KEYS, this.EntityType.prototype);
    fields.forEach(field => {
      const fieldMapping = this.dbSet.fieldMap.get(field);
      if (fieldMapping) {
        this.columnFieldMap.set(fieldMapping.colName, field);
      }
    });
  }
  prepareSelectStatement() {
    this.initColumnFieldMap();
    this.columnFieldMap.forEach((_, colName) => {
      this.stat.columns.push(new sql.Expression(colName));
    });
  }
  async list() {
    this.prepareSelectStatement();
    const result = await this.context.runStatement(this.stat);
    return Promise.all(result.rows.map(this.transformer.bind(this)));
  }
  async count() {
    const countStmt = cloneDeep(this.stat);
    countStmt.columns = [new sql.Expression('count(1) as count')];
    countStmt.groupBy.length = 0;
    countStmt.orderBy.length = 0;
    countStmt.limit = new sql.Expression();
    const countResult = await this.context.runStatement(countStmt);
    return countResult.rows[0]['count'];
  }
  async listAndCount() {
    const values = await this.list();
    const count = await this.count();
    return { count, values };
  }
  async transformer(row) {
    this.columnFieldMap.forEach((field, colName) => {
      if (field != colName) {
        row[field] = row[colName];
      }
    });
    const obj = plainToInstance(this.EntityType, row, { enableImplicitConversion: true, excludeExtraneousValues: true });
    await Promise.all(
      this.foreignKeys.map(async key => {
        const foreignType = Reflect.getMetadata(FOREIGN_KEY_TYPE, obj, key);
        const foreignFunc = Reflect.getMetadata(FOREIGN_KEY_FUNC, obj, key);
        const propertyType = Reflect.getMetadata('design:type', obj, key);
        if (!foreignType || !foreignFunc || !propertyType) return;
        const foreignTableSet = this.context.tableSetMap.get(foreignType);
        if (!foreignTableSet) throw new TypeError('Invalid Type');
        const foreignQuerySet = foreignTableSet.where(eb => {
          return foreignFunc(eb, obj);
        });
        if (propertyType === Array) {
          const data = await foreignQuerySet.list();
          Reflect.set(obj, key, data);
        } else {
          const data = await foreignQuerySet.single();
          Reflect.set(obj, key, data);
        }
      })
    );
    return obj;
  }
  async stream() {
    this.prepareSelectStatement();
    const dataStream = await this.context.streamStatement(this.stat);
    const transformerFunc = this.transformer.bind(this);
    return dataStream.pipe(
      new Transform({
        transform: async (chunk, encoding, callback) => {
          const data = await transformerFunc(chunk);
          callback(null, data);
        }
      })
    );
  }
  select(fields) {
    fields.forEach(field => {
      const fieldMapping = this.dbSet.fieldMap.get(field);
      if (fieldMapping) {
        this.columnFieldMap.set(fieldMapping.colName, field);
      }
    });
    return this;
  }
  include(foreignKeys) {
    this.foreignKeys.push(...foreignKeys);
    return this;
  }
  where(param, ...args) {
    const fieldColumnMap = new Map(Array.from(this.dbSet.fieldMap.entries()).map(([key, value]) => [key, value.colName]));
    const eb = new exprBuilder.WhereExprBuilder(fieldColumnMap);
    const res = param(eb, args);
    if (res && res instanceof sql.Expression && res.exps.length > 0) {
      this.stat.where = this.stat.where.add(res);
    }
    return this;
  }
  groupBy(param) {
    const fieldColumnMap = new Map(Array.from(this.dbSet.fieldMap.entries()).map(([key, value]) => [key, value.colName]));
    const eb = new exprBuilder.GroupExprBuilder(fieldColumnMap);
    const res = param(eb);
    if (res && Array.isArray(res)) {
      res.forEach(expr => {
        if (expr instanceof sql.Expression && expr.exps.length > 0) {
          this.stat.groupBy.push(expr);
        }
      });
    }
    return this;
  }
  orderBy(param) {
    const fieldColumnMap = new Map(Array.from(this.dbSet.fieldMap.entries()).map(([key, value]) => [key, value.colName]));
    const eb = new exprBuilder.OrderExprBuilder(fieldColumnMap);
    const res = param(eb);
    if (res && Array.isArray(res)) {
      res.forEach(a => {
        if (a instanceof sql.Expression && a.exps.length > 0) {
          this.stat.orderBy.push(a);
        }
      });
    }
    return this;
  }
  limit(size, index) {
    this.stat.limit = new sql.Expression(null, sql.types.Operator.Limit);
    this.stat.limit.exps.push(new sql.Expression(size.toString()));
    if (index) {
      this.stat.limit.exps.push(new sql.Expression(index.toString()));
    }
    return this;
  }
  async update(entity, ...updatedKeys) {
    this.stat.command = sql.types.Command.UPDATE;
    let keys = Reflect.getMetadata(TABLE_COLUMN_KEYS, entity.constructor.prototype);
    if (updatedKeys?.length) keys = keys.filter(key => updatedKeys.includes(key));
    const fields = keys.map(key => this.dbSet.fieldMap.get(key)).filter(a => a != null);
    if (fields.length == 0) throw new Error('Update Fields Empty');
    fields.forEach(field => {
      const c1 = new sql.Expression(field.colName);
      const c2 = new sql.Expression('?');
      const val = Reflect.get(entity, field.fieldName);
      c2.args.push(val);
      const expr = new sql.Expression(null, sql.types.Operator.Equal, c1, c2);
      this.stat.columns.push(expr);
    });
    await this.context.runStatement(this.stat);
  }
  async delete() {
    this.stat.command = sql.types.Command.DELETE;
    await this.context.runStatement(this.stat);
  }
  join(joinSet, param, joinType) {
    joinType = joinType ?? sql.types.Join.InnerJoin;
    let temp = null;
    if (param && param instanceof Function) {
      const mainFieldColumnMap = new Map(Array.from(this.columnFieldMap.entries()).map(([key, value]) => [value, key]));
      const mainObj = new exprBuilder.WhereExprBuilder(mainFieldColumnMap);
      const joinFieldColumnMap = new Map(Array.from(joinSet.columnFieldMap.entries()).map(([key, value]) => [value, key]));
      const joinObj = new exprBuilder.BaseExprBuilder(joinFieldColumnMap);
      temp = param(mainObj, joinObj);
    }
    if (!(temp && temp instanceof sql.Expression && temp.exps.length > 0)) throw new Error('Invalid Join');
    const joinQuerySet = new JoinQuerySet(this.context, joinType, this, joinSet, temp);
    return joinQuerySet;
  }
}
export default QuerySet;
//# sourceMappingURL=data:application/json;base64,
