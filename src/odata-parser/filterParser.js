import Expression from 'dblink-core/src/sql/Expression.js';
import Operator from 'dblink-core/src/sql/types/Operator.js';
import { ODataFilterParseError as ODataParseError } from './types.js';
export class FilterParser {
  tokens = [];
  current = 0;
  fieldColumnMap;
  constructor(fieldColumnMap = new Map()) {
    this.fieldColumnMap = fieldColumnMap;
  }
  parse(filter) {
    if (!filter || filter.trim() === '') {
      return new Expression();
    }
    this.tokens = this.tokenize(filter);
    this.current = 0;
    const ast = this.parseOrExpression();
    return this.astToExpression(ast);
  }
  tokenize(filter) {
    const tokens = [];
    let position = 0;
    while (position < filter.length) {
      if (/\s/.test(filter[position])) {
        position++;
        continue;
      }
      if (filter[position] === "'") {
        const start = position;
        position++;
        let value = '';
        while (position < filter.length && filter[position] !== "'") {
          if (filter[position] === '\\' && position + 1 < filter.length) {
            position++;
            switch (filter[position]) {
              case 'n':
                value += '\n';
                break;
              case 't':
                value += '\t';
                break;
              case 'r':
                value += '\r';
                break;
              case '\\':
                value += '\\';
                break;
              case "'":
                value += "'";
                break;
              default:
                value += filter[position];
                break;
            }
          } else {
            value += filter[position];
          }
          position++;
        }
        if (position >= filter.length) {
          throw new ODataParseError('Unterminated string literal', start);
        }
        position++;
        tokens.push({ type: 'STRING', value, position: start });
        continue;
      }
      if (/\d/.test(filter[position]) || (filter[position] === '-' && position + 1 < filter.length && /\d/.test(filter[position + 1]))) {
        const start = position;
        let value = '';
        if (filter[position] === '-') {
          value += filter[position];
          position++;
        }
        while (position < filter.length && /[\d.]/.test(filter[position])) {
          value += filter[position];
          position++;
        }
        tokens.push({ type: 'NUMBER', value, position: start });
        continue;
      }
      if (filter[position] === '(') {
        tokens.push({ type: 'LPAREN', value: '(', position });
        position++;
        continue;
      }
      if (filter[position] === ')') {
        tokens.push({ type: 'RPAREN', value: ')', position });
        position++;
        continue;
      }
      if (filter[position] === ',') {
        tokens.push({ type: 'COMMA', value: ',', position });
        position++;
        continue;
      }
      if (/[a-zA-Z_]/.test(filter[position])) {
        const start = position;
        let value = '';
        while (position < filter.length && /[a-zA-Z0-9_]/.test(filter[position])) {
          value += filter[position];
          position++;
        }
        const lowerValue = value.toLowerCase();
        if (['eq', 'ne', 'gt', 'ge', 'lt', 'le', 'and', 'or', 'not'].includes(lowerValue)) {
          tokens.push({ type: 'OPERATOR', value: lowerValue, position: start });
        } else if (['true', 'false'].includes(lowerValue)) {
          tokens.push({ type: 'BOOLEAN', value: lowerValue, position: start });
        } else if (lowerValue === 'null') {
          tokens.push({ type: 'NULL', value: lowerValue, position: start });
        } else if (['contains', 'startswith', 'endswith', 'add', 'sub', 'mul', 'div', 'in'].includes(lowerValue)) {
          tokens.push({ type: 'FUNCTION', value: lowerValue, position: start });
        } else {
          tokens.push({ type: 'IDENTIFIER', value, position: start });
        }
        continue;
      }
      throw new ODataParseError(`Unexpected character '${filter[position]}'`, position);
    }
    return tokens;
  }
  peek() {
    return this.current < this.tokens.length ? this.tokens[this.current] : null;
  }
  advance() {
    const token = this.peek();
    this.current++;
    return token;
  }
  expect(type, value) {
    const token = this.advance();
    if (!token || token.type !== type || (value && token.value !== value)) {
      throw new ODataParseError(`Expected ${type}${value ? ` '${value}'` : ''} but got ${token ? `${token.type} '${token.value}'` : 'end of input'}`, token?.position);
    }
    return token;
  }
  parseOrExpression() {
    let left = this.parseAndExpression();
    while (this.peek()?.type === 'OPERATOR' && this.peek()?.value === 'or') {
      const operator = this.advance();
      if (!operator) {
        throw new ODataParseError('Unexpected end of input while parsing OR expression');
      }
      const right = this.parseAndExpression();
      left = {
        type: 'BinaryExpression',
        operator: operator.value,
        left,
        right
      };
    }
    return left;
  }
  parseAndExpression() {
    let left = this.parseNotExpression();
    while (this.peek()?.type === 'OPERATOR' && this.peek()?.value === 'and') {
      const operator = this.advance();
      if (!operator) {
        throw new ODataParseError('Unexpected end of input while parsing AND expression');
      }
      const right = this.parseNotExpression();
      left = {
        type: 'BinaryExpression',
        operator: operator.value,
        left,
        right
      };
    }
    return left;
  }
  parseNotExpression() {
    if (this.peek()?.type === 'OPERATOR' && this.peek()?.value === 'not') {
      const operator = this.advance();
      if (!operator) {
        throw new ODataParseError('Unexpected end of input while parsing NOT expression');
      }
      const operand = this.parseNotExpression();
      return {
        type: 'UnaryExpression',
        operator: operator.value,
        operand
      };
    }
    return this.parseComparisonExpression();
  }
  parseComparisonExpression() {
    let left = this.parseAdditiveExpression();
    const peeked = this.peek();
    if (peeked?.type === 'OPERATOR' && ['eq', 'ne', 'gt', 'ge', 'lt', 'le'].includes(peeked.value)) {
      const operator = this.advance();
      if (!operator) {
        throw new ODataParseError('Unexpected end of input while parsing comparison expression');
      }
      const right = this.parseAdditiveExpression();
      left = {
        type: 'BinaryExpression',
        operator: operator.value,
        left,
        right
      };
    }
    return left;
  }
  parseAdditiveExpression() {
    let left = this.parseMultiplicativeExpression();
    let peeked = this.peek();
    while (peeked?.type === 'FUNCTION' && ['add', 'sub'].includes(peeked.value)) {
      const operator = this.advance();
      if (!operator) {
        throw new ODataParseError('Unexpected end of input while parsing additive expression');
      }
      this.expect('LPAREN');
      const right = this.parseMultiplicativeExpression();
      this.expect('RPAREN');
      left = {
        type: 'BinaryExpression',
        operator: operator.value,
        left,
        right
      };
      peeked = this.peek();
    }
    return left;
  }
  parseMultiplicativeExpression() {
    let left = this.parsePrimaryExpression();
    let peeked = this.peek();
    while (peeked?.type === 'FUNCTION' && ['mul', 'div'].includes(peeked.value)) {
      const operator = this.advance();
      if (!operator) {
        throw new ODataParseError('Unexpected end of input while parsing multiplicative expression');
      }
      this.expect('LPAREN');
      const right = this.parsePrimaryExpression();
      this.expect('RPAREN');
      left = {
        type: 'BinaryExpression',
        operator: operator.value,
        left,
        right
      };
      peeked = this.peek();
    }
    return left;
  }
  parsePrimaryExpression() {
    const token = this.peek();
    if (!token) {
      throw new ODataParseError('Unexpected end of input');
    }
    if (token.type === 'LPAREN') {
      this.advance();
      const expr = this.parseOrExpression();
      this.expect('RPAREN');
      return expr;
    }
    if (token.type === 'FUNCTION') {
      return this.parseFunctionCall();
    }
    if (token.type === 'STRING') {
      this.advance();
      return { type: 'Literal', value: token.value };
    }
    if (token.type === 'NUMBER') {
      this.advance();
      const numValue = token.value.includes('.') ? parseFloat(token.value) : parseInt(token.value, 10);
      return { type: 'Literal', value: numValue };
    }
    if (token.type === 'BOOLEAN') {
      this.advance();
      return { type: 'Literal', value: token.value === 'true' };
    }
    if (token.type === 'NULL') {
      this.advance();
      return { type: 'Literal', value: null };
    }
    if (token.type === 'IDENTIFIER') {
      this.advance();
      return { type: 'Identifier', name: token.value };
    }
    throw new ODataParseError(`Unexpected token '${token.value}'`, token.position);
  }
  parseFunctionCall() {
    const funcToken = this.expect('FUNCTION');
    this.expect('LPAREN');
    const args = [];
    if (this.peek()?.type === 'RPAREN') {
      this.advance();
      return {
        type: 'FunctionCall',
        name: funcToken.value,
        arguments: args
      };
    }
    do {
      args.push(this.parseOrExpression());
      if (this.peek()?.type === 'COMMA') {
        this.advance();
      } else {
        break;
      }
    } while (this.peek()?.type !== 'RPAREN');
    this.expect('RPAREN');
    return {
      type: 'FunctionCall',
      name: funcToken.value,
      arguments: args
    };
  }
  astToExpression(node) {
    switch (node.type) {
      case 'BinaryExpression':
        return this.createBinaryExpression(node);
      case 'UnaryExpression':
        return this.createUnaryExpression(node);
      case 'FunctionCall':
        return this.createFunctionExpression(node);
      case 'Literal':
        return this.createLiteralExpression(node);
      case 'Identifier':
        return this.createIdentifierExpression(node);
      default:
        throw new ODataParseError(`Unknown AST node type: ${node.type || 'unknown'}`);
    }
  }
  createBinaryExpression(node) {
    if (!node.left || !node.right || !node.operator) {
      throw new ODataParseError('Invalid binary expression');
    }
    const left = this.astToExpression(node.left);
    const right = this.astToExpression(node.right);
    let operator;
    switch (node.operator) {
      case 'eq':
        operator = Operator.Equal;
        break;
      case 'ne':
        operator = Operator.NotEqual;
        break;
      case 'gt':
        operator = Operator.GreaterThan;
        break;
      case 'ge':
        operator = Operator.GreaterThanEqual;
        break;
      case 'lt':
        operator = Operator.LessThan;
        break;
      case 'le':
        operator = Operator.LessThanEqual;
        break;
      case 'and':
        operator = Operator.And;
        break;
      case 'or':
        operator = Operator.Or;
        break;
      case 'add':
        operator = Operator.Plus;
        break;
      case 'sub':
        operator = Operator.Minus;
        break;
      case 'mul':
        operator = Operator.Multiply;
        break;
      case 'div':
        operator = Operator.Devide;
        break;
      case 'mod': {
        const modExpr = new Expression('MOD(?, ?)');
        modExpr.args = [];
        throw new ODataParseError('Modulo operator (mod) is not supported by the current SQL expression system');
      }
      default:
        throw new ODataParseError(`Unknown binary operator: ${node.operator}`);
    }
    return new Expression(null, operator, left, right);
  }
  createUnaryExpression(node) {
    if (!node.operand || !node.operator) {
      throw new ODataParseError('Invalid unary expression');
    }
    const operand = this.astToExpression(node.operand);
    let operator;
    switch (node.operator) {
      case 'not':
        operator = Operator.Not;
        break;
      default:
        throw new ODataParseError(`Unknown unary operator: ${node.operator}`);
    }
    return new Expression(null, operator, operand);
  }
  createFunctionExpression(node) {
    if (!node.name || !node.arguments) {
      throw new ODataParseError('Invalid function call');
    }
    const args = node.arguments.map(arg => this.astToExpression(arg));
    switch (node.name) {
      case 'contains': {
        if (args.length !== 2) {
          throw new ODataParseError('contains function requires exactly 2 arguments');
        }
        const containsValue = new Expression('?');
        containsValue.args = [`%${this.extractLiteralValue(node.arguments[1])}%`];
        return new Expression(null, Operator.Like, args[0], containsValue);
      }
      case 'startswith': {
        if (args.length !== 2) {
          throw new ODataParseError('startswith function requires exactly 2 arguments');
        }
        const startsValue = new Expression('?');
        startsValue.args = [`${this.extractLiteralValue(node.arguments[1])}%`];
        return new Expression(null, Operator.Like, args[0], startsValue);
      }
      case 'endswith': {
        if (args.length !== 2) {
          throw new ODataParseError('endswith function requires exactly 2 arguments');
        }
        const endsValue = new Expression('?');
        endsValue.args = [`%${this.extractLiteralValue(node.arguments[1])}`];
        return new Expression(null, Operator.Like, args[0], endsValue);
      }
      case 'length':
        if (args.length !== 1) {
          throw new ODataParseError('length function requires exactly 1 argument');
        }
        throw new ODataParseError('Length function is not supported. Consider using a simpler filter or raw SQL query.');
      case 'year':
      case 'month':
      case 'day':
      case 'hour':
      case 'minute':
      case 'second':
        if (args.length !== 1) {
          throw new ODataParseError(`${node.name} function requires exactly 1 argument`);
        }
        throw new ODataParseError(`Date function '${node.name}' is not supported. Consider using a simpler filter or raw SQL query.`);
      case 'in':
        if (args.length < 2) {
          throw new ODataParseError('in function requires at least 2 arguments');
        }
        return new Expression(null, Operator.In, args[0], ...args.slice(1));
      default:
        throw new ODataParseError(`Unknown function: ${node.name}`);
    }
  }
  createLiteralExpression(node) {
    const expr = new Expression('?');
    expr.args = [node.value];
    return expr;
  }
  createIdentifierExpression(node) {
    if (!node.name) {
      throw new ODataParseError('Invalid identifier');
    }
    const columnName = this.fieldColumnMap.get(node.name) || node.name;
    return new Expression(columnName);
  }
  extractLiteralValue(node) {
    if (node.type === 'Literal' && node.value !== null && node.value !== undefined) {
      return node.value;
    }
    throw new ODataParseError('Expected literal value');
  }
}
export function createFilterParser(fieldColumnMap) {
  return new FilterParser(fieldColumnMap);
}
export function parseFilter(filter, fieldColumnMap) {
  const parser = new FilterParser(fieldColumnMap);
  return parser.parse(filter);
}
export default FilterParser;
//# sourceMappingURL=data:application/json;base64,
