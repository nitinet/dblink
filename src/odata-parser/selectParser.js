import { ODataSelectParseError } from './types.js';
var TokenType;
(function (TokenType) {
  TokenType['Field'] = 'FIELD';
  TokenType['Comma'] = 'COMMA';
  TokenType['Whitespace'] = 'WHITESPACE';
  TokenType['EOF'] = 'EOF';
})(TokenType || (TokenType = {}));
class SelectParser {
  tokens = [];
  position = 0;
  parse(query) {
    if (!query || typeof query !== 'string') {
      return {
        fields: [],
        originalQuery: query || '',
        success: false,
        error: 'Query must be a non-empty string'
      };
    }
    this.tokens = [];
    this.position = 0;
    try {
      this.tokenize(query.trim());
      const fields = this.parseFields();
      const normalizedFields = this.validateAndNormalizeFields(fields);
      return {
        fields: normalizedFields,
        originalQuery: query,
        success: true
      };
    } catch (error) {
      return {
        fields: [],
        originalQuery: query,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown parsing error'
      };
    }
  }
  tokenize(query) {
    let position = 0;
    while (position < query.length) {
      const char = query[position];
      if (char === ',') {
        this.tokens.push({
          type: TokenType.Comma,
          value: char,
          position
        });
        position++;
      } else if (/\s/.test(char)) {
        let whitespace = '';
        while (position < query.length && /\s/.test(query[position])) {
          whitespace += query[position];
          position++;
        }
        if (whitespace.length > 0) {
          this.tokens.push({
            type: TokenType.Whitespace,
            value: whitespace,
            position: position - whitespace.length
          });
        }
      } else {
        let fieldName = '';
        const startPos = position;
        while (position < query.length && !','.includes(query[position]) && !/\s/.test(query[position])) {
          fieldName += query[position];
          position++;
        }
        if (fieldName.length > 0) {
          this.tokens.push({
            type: TokenType.Field,
            value: fieldName,
            position: startPos
          });
        }
      }
    }
    this.tokens.push({
      type: TokenType.EOF,
      value: '',
      position: query.length
    });
  }
  parseFields() {
    const fields = [];
    while (!this.isAtEnd()) {
      this.skipWhitespace();
      if (this.isAtEnd()) {
        break;
      }
      if (this.peek().type !== TokenType.Field) {
        throw new ODataSelectParseError(`Expected field name at position ${this.peek().position}, found ${this.peek().type}`, this.peek().position);
      }
      const fieldToken = this.advance();
      fields.push({
        name: fieldToken.value,
        position: fieldToken.position
      });
      this.skipWhitespace();
      if (this.isAtEnd()) {
        break;
      }
      if (this.peek().type === TokenType.Comma) {
        this.advance();
        this.skipWhitespace();
        if (this.isAtEnd()) {
          throw new ODataSelectParseError('Unexpected end of query after comma');
        }
      } else if (this.peek().type !== TokenType.EOF) {
        throw new ODataSelectParseError(`Expected comma or end of query at position ${this.peek().position}, found ${this.peek().type}`, this.peek().position);
      }
    }
    return fields;
  }
  skipWhitespace() {
    while (!this.isAtEnd() && this.peek().type === TokenType.Whitespace) {
      this.advance();
    }
  }
  isAtEnd() {
    return this.peek().type === TokenType.EOF;
  }
  peek() {
    return this.tokens[this.position] || { type: TokenType.EOF, value: '', position: -1 };
  }
  advance() {
    if (!this.isAtEnd()) {
      this.position++;
    }
    return this.tokens[this.position - 1] || { type: TokenType.EOF, value: '', position: -1 };
  }
  validateAndNormalizeFields(fields) {
    if (fields.length === 0) {
      throw new ODataSelectParseError('No fields specified in select query');
    }
    const normalizedFields = [];
    const seenFields = new Set();
    for (const field of fields) {
      if (!this.isValidFieldName(field.name)) {
        throw new ODataSelectParseError(`Invalid field name '${field.name}' at position ${field.position}`, field.position);
      }
      const normalizedName = field.name.trim();
      if (seenFields.has(normalizedName)) {
        throw new ODataSelectParseError(`Duplicate field '${normalizedName}' at position ${field.position}`, field.position);
      }
      seenFields.add(normalizedName);
      normalizedFields.push(normalizedName);
    }
    return normalizedFields;
  }
  isValidFieldName(name) {
    if (!name || name.trim().length === 0) {
      return false;
    }
    const fieldNameRegex = /^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$/;
    return fieldNameRegex.test(name.trim());
  }
  static parseToFieldArray(query) {
    const parser = new SelectParser();
    const result = parser.parse(query);
    if (!result.success) {
      throw new ODataSelectParseError(`OData select parsing failed: ${result.error}`);
    }
    return result.fields;
  }
  static isValidSelectQuery(query) {
    try {
      const parser = new SelectParser();
      const result = parser.parse(query);
      return result.success;
    } catch {
      return false;
    }
  }
  static applySelect(querySet, odataSelect, availableFields) {
    const fields = this.parseToFieldArray(odataSelect);
    if (availableFields) {
      const invalidFields = fields.filter(field => !availableFields.includes(field));
      if (invalidFields.length > 0) {
        throw new ODataSelectParseError(`Invalid field(s) in select: ${invalidFields.join(', ')}. Available fields: ${availableFields.join(', ')}`);
      }
    }
    return querySet.select(fields);
  }
}
export default SelectParser;
//# sourceMappingURL=data:application/json;base64,
