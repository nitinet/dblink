import Expression from 'dblink-core/src/sql/Expression.js';
import Operator from 'dblink-core/src/sql/types/Operator.js';
import { ODataTopSkipParseError } from './types.js';
export class TopSkipParser {
  parse(params) {
    const { top, skip } = params;
    if (top !== undefined && (!Number.isInteger(top) || top < 0)) {
      throw new ODataTopSkipParseError('Top value must be a non-negative integer', 'top');
    }
    if (skip !== undefined && (!Number.isInteger(skip) || skip < 0)) {
      throw new ODataTopSkipParseError('Skip value must be a non-negative integer', 'skip');
    }
    if (top === undefined && skip === undefined) {
      return null;
    }
    const limitExpr = new Expression(null, Operator.Limit);
    const topValue = top !== undefined ? top : Number.MAX_SAFE_INTEGER;
    limitExpr.exps.push(new Expression(topValue.toString()));
    if (skip !== undefined && skip > 0) {
      limitExpr.exps.push(new Expression(skip.toString()));
    }
    return limitExpr;
  }
  parseFromQuery(queryParams) {
    const result = {};
    if (queryParams.$top !== undefined) {
      const topValue = typeof queryParams.$top === 'string' ? parseInt(queryParams.$top, 10) : queryParams.$top;
      if (isNaN(topValue)) {
        throw new ODataTopSkipParseError('Top parameter must be a valid integer', '$top');
      }
      result.top = topValue;
    }
    if (queryParams.$skip !== undefined) {
      const skipValue = typeof queryParams.$skip === 'string' ? parseInt(queryParams.$skip, 10) : queryParams.$skip;
      if (isNaN(skipValue)) {
        throw new ODataTopSkipParseError('Skip parameter must be a valid integer', '$skip');
      }
      result.skip = skipValue;
    }
    return result;
  }
  parseFromQueryString(queryString) {
    const params = new URLSearchParams(queryString);
    const queryParams = {};
    if (params.has('$top')) {
      const topValue = params.get('$top');
      if (topValue !== null) {
        queryParams.$top = topValue;
      }
    }
    if (params.has('$skip')) {
      const skipValue = params.get('$skip');
      if (skipValue !== null) {
        queryParams.$skip = skipValue;
      }
    }
    const topSkipParams = this.parseFromQuery(queryParams);
    return this.parse(topSkipParams);
  }
}
export function parseTopSkip(params) {
  const parser = new TopSkipParser();
  return parser.parse(params);
}
export function parseTopSkipFromQuery(queryParams) {
  const parser = new TopSkipParser();
  const topSkipParams = parser.parseFromQuery(queryParams);
  return parser.parse(topSkipParams);
}
export function parseTopSkipFromQueryString(queryString) {
  const parser = new TopSkipParser();
  return parser.parseFromQueryString(queryString);
}
export function topSkipToLimitParams(params) {
  const { top, skip } = params;
  const result = {};
  if (top !== undefined) {
    result.size = top;
  }
  if (skip !== undefined) {
    result.index = skip;
  }
  return result;
}
export function limitExpressionToTopSkip(limitExpr) {
  if (limitExpr.operator !== Operator.Limit || limitExpr.exps.length === 0) {
    throw new ODataTopSkipParseError('Invalid limit expression provided');
  }
  const result = {};
  const topExpr = limitExpr.exps[0];
  if (topExpr && topExpr.value) {
    const topValue = parseInt(topExpr.value, 10);
    if (!isNaN(topValue) && topValue !== Number.MAX_SAFE_INTEGER) {
      result.top = topValue;
    }
  }
  if (limitExpr.exps.length > 1) {
    const skipExpr = limitExpr.exps[1];
    if (skipExpr && skipExpr.value) {
      const skipValue = parseInt(skipExpr.value, 10);
      if (!isNaN(skipValue)) {
        result.skip = skipValue;
      }
    }
  }
  return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wU2tpcFBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRvcFNraXBQYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVLE1BQU0sbUNBQW1DLENBQUM7QUFDM0QsT0FBTyxRQUFRLE1BQU0sdUNBQXVDLENBQUM7QUFDN0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBb0NwRCxNQUFNLE9BQU8sYUFBYTtJQU94QixLQUFLLENBQUMsTUFBcUI7UUFDekIsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFHN0IsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdELE1BQU0sSUFBSSxzQkFBc0IsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RixDQUFDO1FBRUQsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2hFLE1BQU0sSUFBSSxzQkFBc0IsQ0FBQywyQ0FBMkMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RixDQUFDO1FBR0QsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUM1QyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFHRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBR3ZELE1BQU0sUUFBUSxHQUFHLEdBQUcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixD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
