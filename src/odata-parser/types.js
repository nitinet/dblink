export var CommonTokenType;
(function (CommonTokenType) {
  CommonTokenType['IDENTIFIER'] = 'IDENTIFIER';
  CommonTokenType['STRING'] = 'STRING';
  CommonTokenType['NUMBER'] = 'NUMBER';
  CommonTokenType['BOOLEAN'] = 'BOOLEAN';
  CommonTokenType['NULL'] = 'NULL';
  CommonTokenType['OPERATOR'] = 'OPERATOR';
  CommonTokenType['FUNCTION'] = 'FUNCTION';
  CommonTokenType['LPAREN'] = 'LPAREN';
  CommonTokenType['RPAREN'] = 'RPAREN';
  CommonTokenType['COMMA'] = 'COMMA';
  CommonTokenType['WHITESPACE'] = 'WHITESPACE';
  CommonTokenType['EOF'] = 'EOF';
})(CommonTokenType || (CommonTokenType = {}));
export var Direction;
(function (Direction) {
  Direction['ASC'] = 'asc';
  Direction['DESC'] = 'desc';
})(Direction || (Direction = {}));
export class ODataParseError extends Error {
  position;
  parameter;
  constructor(message, options) {
    const fullMessage = options?.position !== undefined ? `${message} at position ${options.position}` : options?.parameter ? `${message} for parameter '${options.parameter}'` : message;
    super(fullMessage);
    this.name = 'ODataParseError';
    this.position = options?.position;
    this.parameter = options?.parameter;
  }
}
export class ODataFilterParseError extends ODataParseError {
  constructor(message, position) {
    super(message, { position });
    this.name = 'ODataFilterParseError';
  }
}
export class ODataOrderByParseError extends ODataParseError {
  constructor(message, position) {
    super(message, { position });
    this.name = 'ODataOrderByParseError';
  }
}
export class ODataSelectParseError extends ODataParseError {
  constructor(message, position) {
    super(message, { position });
    this.name = 'ODataSelectParseError';
  }
}
export class ODataTopSkipParseError extends ODataParseError {
  constructor(message, parameter) {
    super(message, { parameter });
    this.name = 'ODataTopSkipParseError';
  }
}
export const ODataParseUtils = {
  isAlpha(char) {
    return /[a-zA-Z]/.test(char);
  },
  isAlphaNumeric(char) {
    return /[a-zA-Z0-9]/.test(char);
  },
  isNumeric(char) {
    return /[0-9]/.test(char);
  },
  isWhitespace(char) {
    return /\s/.test(char);
  },
  isIdentifierChar(char) {
    return /[a-zA-Z0-9_.]/.test(char);
  },
  isValidIdentifier(str) {
    return /^[a-zA-Z][a-zA-Z0-9_.]*$/.test(str);
  },
  trim(str) {
    return str.trim();
  },
  parseNumber(str) {
    const num = Number(str);
    if (isNaN(num)) {
      throw new ODataParseError(`Invalid number: ${str}`);
    }
    return num;
  },
  parseBoolean(str) {
    const lower = str.toLowerCase();
    if (lower === 'true') return true;
    if (lower === 'false') return false;
    throw new ODataParseError(`Invalid boolean value: ${str}`);
  },
  escapeString(str) {
    return str.replace(/'/g, "''");
  },
  unescapeString(str) {
    return str.replace(/''/g, "'");
  }
};
export class BaseTokenizer {
  input;
  position;
  length;
  constructor(input) {
    this.input = input;
    this.position = 0;
    this.length = input.length;
  }
  current() {
    return this.position < this.length ? this.input[this.position] : '';
  }
  peek(offset = 1) {
    const pos = this.position + offset;
    return pos < this.length ? this.input[pos] : '';
  }
  advance() {
    const char = this.current();
    this.position++;
    return char;
  }
  skipWhitespace() {
    while (this.position < this.length && ODataParseUtils.isWhitespace(this.current())) {
      this.position++;
    }
  }
  isAtEnd() {
    return this.position >= this.length;
  }
  createToken(type, value, startPosition) {
    return {
      type,
      value,
      position: startPosition ?? this.position
    };
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLENBQU4sSUFBWSxlQWFYO0FBYkQsV0FBWSxlQUFlO0lBQ3pCLDRDQUF5QixDQUFBO0lBQ3pCLG9DQUFpQixDQUFBO0lBQ2pCLG9DQUFpQixDQUFBO0lBQ2pCLHNDQUFtQixDQUFBO0lBQ25CLGdDQUFhLENBQUE7SUFDYix3Q0FBcUIsQ0FBQTtJQUNyQix3Q0FBcUIsQ0FBQTtJQUNyQixvQ0FBaUIsQ0FBQTtJQUNqQixvQ0FBaUIsQ0FBQTtJQUNqQixrQ0FBZSxDQUFBO0lBQ2YsNENBQXlCLENBQUE7SUFDekIsOEJBQVcsQ0FBQTtBQUNiLENBQUMsRUFiVyxlQUFlLEtBQWYsZUFBZSxRQWExQjtBQUtELE1BQU0sQ0FBTixJQUFZLFNBR1g7QUFIRCxXQUFZLFNBQVM7SUFDbkIsd0JBQVcsQ0FBQTtJQUNYLDBCQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsU0FBUyxLQUFULFNBQVMsUUFHcEI7QUF1RkQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsS0FBSztJQUN4QixRQUFRLENBQVU7SUFDbEIsU0FBUyxDQUFVO0lBRW5DLFlBQVksT0FBZSxFQUFFLE9BQW1EO1FBQzlFLE1BQU0sV0FBVyxHQUFHLE9BQU8sRUFBRSxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sZ0JBQWdCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLG1CQUFtQixPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUV0TCxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sRUFBRSxRQUFRLENBQUM7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
